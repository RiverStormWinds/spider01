注意事项:
    1. 为什么要使用 cookiejar？
        因为我们要使用爬虫模拟登陆操作，必须使用cookie管理工具将我们登陆网站的cokkie
        统一管理起来

    模拟登陆的过程是什么？
        1. 建立cookie管理工具对象
            from http import cookiejar
            cookieJar = cookiejar.CookieJar()
        2. 建立handler对象
            handler对象是用来处理cookie的，通过管理cookie来进行控制登陆操作
            handler = request.HTTPCookieProcessor(cookieJar)
        3. 创建请求的opener对象
            opener = request.build_opener(handler)
            opener对象相当于是一个浏览器，可以模仿用户在浏览器登陆网站的操作
        4. 创建请求对象
            params = parse.urlencode(loginParams)
            loginReq = request.Request(url=login_url,
                                       data=params.encode(), haeders=headers)
        5. 发起登陆请求
            resp = opener.open(loginReq)

    以上五步，可以解决爬虫登陆操作

    2. 找到登陆请求的接口
        1. 我们首先真实登陆一次，这时候抓包工具就会抓到请求的报文，这就是我们登陆请求的接口
            [Full request URI: http://www.renren.com/ajaxLogin/login?1=1&uniqueTimestamp=2018532254789]
            上文就是我们真实登陆所捕获到的报文，也就是爬虫登陆操作的登陆接口
        2. 我们构造登陆爬虫三要素：
            1. 请求接口 url：  上文的接口  已解决
            2. 请求登陆的参数： params，需要我们在下文构造
            3. 伪造的请求头部： headers， 已利用

    3. 正则：使用正则解析我们所爬取的内容（得到想要的数据）
        代理爬取：代理使用来保护我们真实ip地址，代理需要花钱买，一般被封的都是代理ip，不会影响到我们真是ip
        import re  # 导入正则模块
        regex = re.compile(r'1[3-9]\d{9}$')  # 将一个正则字符串编译成正则对象
        # 可以通过正则对象进行匹配，截取，查找等等... 爬虫一般都是用findall方法
        list = regex.findall('搜索的文本')

        扩展js的正则：
            if(/1[3-9]\d{9}/.test('18876356478')){

            }

        重要的内容：
            正则中使用元字符（*, +, ?)的含义 : 贪婪模式
            *： 0 --- 多
            +： 1 --- 多
            ?： 0 --- 1
            禁止贪婪模式，可以在元字符的后面使用 '?' ，如：  .*?,  .+?,  \d{1, 9}?,   禁用贪婪模式

        其他的元字符
            .  任意字符， 除了空白(\n, \t, \f 换页, 空格), \r\n：在windews里面是换行， \n：在linux里面是换行
            \w 数字，字母，下划线
            \W 非(数字，字母，下划线)
            \d 数字
            \D 非数字
            \s 空白
            \S 非空白
            \b 边界
            ^  字符开始
            $  字符结尾

        分组：
        1. 分组名可以匹配： disen前后数字都要保持一致
            (?P<id>\d)disen(?P=id)
            8disen8,    9disen9
        2. 编号也可以匹配：
            (\d+)disen\1  : 这个\1指的就是第一组，用\1, \2, 来匹配每个组
            688disen688

        3. re.findall(r'(?P<id>\d)abc(?P=id)', '8abc8', re.S)  # re.S单行匹配























